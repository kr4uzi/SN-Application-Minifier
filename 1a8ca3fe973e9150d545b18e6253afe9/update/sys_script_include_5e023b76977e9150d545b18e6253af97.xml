<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_376096_minify.Minify</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>Minify</name>
        <script><![CDATA[/* global global, gs, x_376096_minify */
/* global Set, Map */
/* global Class, GlideRecord, GlideAggregate, GlideScriptedExtensionPoint, GlideScopedEvaluator */
/* eslint no-undef: "error" */
var Minify = Class.create();
Minify.prototype = {
	initialize: function() {
		this.queueUtil = new x_376096_minify.MinifyQueue();
	},

	showMinifyUIAction: function(anyGr) {
		if (!this.showUnminifyUIAction(anyGr)) {
			if (anyGr.canWrite()) {
				const tableName = anyGr.getRecordClassName();
				// minify is not available if the record is already minified
				const shadowRecordExists = this._shadowRecordExists(tableName, anyGr.getUniqueValue());
				if (!shadowRecordExists) {
					let queueItemGr = new GlideRecord('x_376096_minify_queue_item');
					queueItemGr.addQuery('reference_sys_id', anyGr.sys_id);
					queueItemGr.setLimit(1);
					queueItemGr.query();
					if (!queueItemGr.hasNext()) {				
						let targetGr = new GlideRecord('x_376096_minify_target');

						// 1.) in case we want to minify a whole app, at least one active minify rule must exist!
						// 2.) in case we want to minify a certain record, at leat one active rule for this table must exit!
						if (tableName != 'sys_app') {
							targetGr.addQuery('table', tableName);
						}

						targetGr.addQuery('active', true);
						targetGr.setLimit(1);
						targetGr.query();
						return targetGr.hasNext();
					}
				}
			}
		}

		return false;
	},

	showUnminifyUIAction: function(anyGr) {
		if (anyGr.canWrite()) {
			const recordTable = anyGr.getRecordClassName();
			const recordSysID = anyGr.getUniqueValue();
			let shadowRecordGr;
			if (recordTable == 'sys_app') {
				shadowRecordGr = new GlideRecord('x_376096_minify_shadow_record');
				shadowRecordGr.addQuery('application', recordSysID);
				shadowRecordGr.setLimit(1);
				shadowRecordGr.query();
			} else {
				shadowRecordGr = new GlideRecord('x_376096_minify_shadow_record');
				shadowRecordGr.addQuery('reference_table', recordTable);
				shadowRecordGr.addQuery('reference_sys_id', recordSysID);
				shadowRecordGr.setLimit(1);
				shadowRecordGr.query();
			}
			
			return shadowRecordGr.hasNext();
		}

		return false;
	},

	unminifyRecord: function(anyGr) {
		let result = {
			status: 'error',
			message: ''
		};

		const recordClassName = anyGr.getRecordClassName();
		const recordSysID = anyGr.getUniqueValue();
		try {
			let extensionPoint = this.getExtensionPoint(recordClassName);
			let shadowRecord = new GlideRecord('x_376096_minify_shadow_record');
			shadowRecord.addQuery('reference_table', recordClassName);
			shadowRecord.addQuery('reference_sys_id', recordSysID);
			shadowRecord.setLimit(1);
			shadowRecord.query();
			if (shadowRecord.next()) {
				let shadowFieldGr = new GlideRecord('x_376096_minify_shadow_field');
				shadowFieldGr.addQuery('shadow_record', shadowRecord.sys_id);
				shadowFieldGr.query();
				while (shadowFieldGr.next()) {
					extensionPoint.setRecordField(anyGr, shadowFieldGr.field.toString(), shadowFieldGr.value.toString());
				}
				
				extensionPoint.writeBackRecord(anyGr);
				shadowRecord.deleteRecord();
				result.status = 'success';
			} else {
				result.message = gs.getMessage('x_376096_minify_invalid_parameters');
			}
		} catch (e) {
			result.message += e;
			if (e.stack) {
				result.message += '\n' + e.stack;
			}
		}

		return result;
	},

	unminifyApp: function(appGr) {
		let result = {
			status: 'error',
			message: ''
		};

		let shadowRecordGr = new GlideRecord('x_376096_minify_shadow_record');
		shadowRecordGr.addQuery('application', appGr.sys_id);
		shadowRecordGr.query();
		while (shadowRecordGr.next()) {
			try {
				let recordGr = shadowRecordGr.reference_sys_id.getRefRecord();
				const recordResult = this.unminifyRecord(recordGr);
				if (recordResult.status != 'success') {
					throw new Error(recordResult.message);
				}
				
				result.status = 'success';
			} catch (e) {
				let errorMessage = e.message;
				if (e.stack) {
					errorMessage += '\n' + e;
				}
				
				result.status = 'error';
				result.message += errorMessage;
				gs.error('[AppMinify][unminifyApp][app=' + appGr.sys_id + ']' + errorMessage);
				break;
			}
		}
		
		return result;
	},
	
	previewMinifyApp: function (appGr) {
		let result = {
			status: 'error',
			message: ''
		};
		
		try {
			let count = 0;
			for (const [table, config] of this.queueUtil.getMinifyTargetMap(appGr)) {
				let recordGr = config.util.queryRecords(table, config.query);
				count += recordGr.getRowCount();
			}
			
			result.count = count;
			result.status = 'success';
		} catch (e) {
			let errorMessage = e.message;
			if (e.stack) {
				errorMessage += '\n' + e.stack;
			}

			if (gs.hasRole('admin')) {
				result.message += errorMessage;
			}

			gs.error('[Minify][previewMinifyApp][app=' + appGr.sys_id + '] Failed to generate minify preview: ' + errorMessage);
		}
		
		return result;
	},
	
	startQueue: function (queueGr) {
		let queueItemGr = new GlideRecord('x_376096_minify_queue_item');
		queueItemGr.addQuery('queue', queueGr.sys_id);
		queueItemGr.addQuery('state', '!=', 'waiting');
		queueItemGr.query();
		while (queueItemGr.next()) {
			queueItemGr.state = 'waiting';
			queueItemGr.update();
		}

		queueItemGr.finished_count = 0;
		queueItemGr.update();

		this.queueUtil.processQueue(queueGr);
	},

	minifyApp: function (appGr) {
		let result = this.queueUtil.enqueueApp(appGr);
		return result;
	},

	minifyRecord: function (metadataGr) {
		let result = {
			status: 'error',
			message: ''
		};
		
		let queueGr = new GlideRecord('x_376096_minify_queue');
		queueGr.newRecord();
		queueGr.target_table = metadataGr.getRecordClassName();
		queueGr.target_sys_id = metadataGr.getUniqueValue();
		const queueSysID = queueGr.insert();
		if (queueSysID) {
			const enqueueResult = this.queueUtil.enqueueRecord(metadataGr, queueGr);
			if (enqueueResult.status == 'success') {
				result.queue = {
					sys_id: queueSysID,
					items: enqueueResult.items
				};
				
				result.status = 'success';
			} else {
				queueGr.get(queueGr.getUniqueValue());
				queueGr.deleteRecord();
				result.message = enqueueResult.message;
			}
		} else {
			result.message = 'Failed to create queue';
		}
		
		return JSON.stringify(result);
	},
	
	_shadowRecordExists: function (recordTable, recordSysID) {
		if (recordTable == 'sys_app') {
			let shadowAppGr = new GlideRecord('x_376096_minify_shadow_application');
			shadowAppGr.addQuery('app', recordSysID);
			shadowAppGr.setLimit(1);
			shadowAppGr.query();
			return shadowAppGr.hasNext();
		}
		
		let shadowRecordGr = new GlideRecord('x_376096_minify_shadow_record');
		shadowRecordGr.addQuery('reference_table', recordTable);
		shadowRecordGr.addQuery('reference_sys_id', recordSysID);
		shadowRecordGr.setLimit(1);
		shadowRecordGr.query();
		return shadowRecordGr.hasNext();
	},
	
	getExtensionPoint: function (table) {
		return this.queueUtil.getExtensionPoint(table);
	},

	type: 'Minify'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-10-31 15:29:59</sys_created_on>
        <sys_id>5e023b76977e9150d545b18e6253af97</sys_id>
        <sys_name>Minify</sys_name>
        <sys_package display_value="Application Minifier" source="x_376096_minify">1a8ca3fe973e9150d545b18e6253afe9</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Application Minifier">1a8ca3fe973e9150d545b18e6253afe9</sys_scope>
        <sys_update_name>sys_script_include_5e023b76977e9150d545b18e6253af97</sys_update_name>
    </sys_script_include>
</record_update>
